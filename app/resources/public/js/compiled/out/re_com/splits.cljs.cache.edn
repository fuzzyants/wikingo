;; Analyzed by ClojureScript 0.0-3211
{:use-macros {validate-args-macro re-com.validate, handler-fn re-com.core}, :excludes #{}, :name re-com.splits, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, re-com.validate re-com.validate, re-com.box re-com.box, re-com.util re-com.util}, :uses {sum-scroll-offsets re-com.util, html-attr? re-com.validate, flex-flow-style re-com.box, get-element-by-id re-com.util, css-style? re-com.validate, string-or-hiccup? re-com.validate, flex-child-style re-com.box, number-or-string? re-com.validate}, :defs {v-split {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args})], :arglists [[& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}]], :arglists-meta (nil)}, :arglists (quote ([& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}])), :doc "Returns markup for a vertical layout component", :end-column 14, :end-line 136, :column 7, :line 136, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/splits.cljs"}, :name re-com.splits/v-split, :variadic true, :file "resources/public/js/compiled/out/re_com/splits.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args})], :arglists [[& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}]], :arglists-meta (nil)}, :method-params [({:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 0, :fn-var true, :arglists [[& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}]], :doc "Returns markup for a vertical layout component", :test true}, h-split {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args})], :arglists [[& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}]], :arglists-meta (nil)}, :arglists (quote ([& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}])), :doc "Returns markup for a horizontal layout component", :end-column 14, :end-line 53, :column 7, :line 53, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/splits.cljs"}, :name re-com.splits/h-split, :variadic true, :file "resources/public/js/compiled/out/re_com/splits.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args})], :arglists [[& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}]], :arglists-meta (nil)}, :method-params [({:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists [[& {:keys [panel-1 panel-2 size width height on-split-change initial-split splitter-size margin class style attr], :or {size "auto", initial-split 50, splitter-size "8px", margin "8px"}, :as args}]], :doc "Returns markup for a horizontal layout component", :test true}, hv-split-args-desc {:meta {:end-column 24, :end-line 39, :column 6, :line 39, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/splits.cljs"}, :file "resources/public/js/compiled/out/re_com/splits.cljs", :line 39, :column 1, :end-line 39, :end-column 24, :test true, :name re-com.splits/hv-split-args-desc}, drag-handle {:protocol-inline nil, :meta {:arglists (quote ([orientation over?])), :doc "Return a drag handle to go into a vertical or horizontal splitter bar:\n    orientation: Can be :horizonal or :vertical\n    over?:       When true, the mouse is assumed to be over the splitter so show a bolder color", :end-column 18, :end-line 9, :column 7, :line 9, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/splits.cljs"}, :name re-com.splits/drag-handle, :variadic false, :file "resources/public/js/compiled/out/re_com/splits.cljs", :end-column 18, :method-params ([orientation over?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([orientation over?])), :doc "Return a drag handle to go into a vertical or horizontal splitter bar:\n    orientation: Can be :horizonal or :vertical\n    over?:       When true, the mouse is assumed to be over the splitter so show a bolder color", :test true}}, :require-macros {re-com.validate re-com.validate, re-com.core re-com.core}, :cljs.analyzer/constants {:order [:vertical :div :class :style :width :height :margin :border-right :border-bottom :name :required :type :validate-fn :description :panel-1 :panel-2 :default :size :span :span.bold :br :code :on-split-change :initial-split :splitter-size :attr :left :id :on-mouse-up :on-mouse-move :on-mouse-out :overflow :pointer-events :on-mouse-down :on-mouse-over :cursor :background-color :top :horizontal], :seen #{:description :splitter-size :on-split-change :horizontal :border-right :top :on-mouse-out :default :overflow :name :background-color :width :cursor :vertical :type :on-mouse-down :size :style :div :span.bold :id :class :on-mouse-move :code :validate-fn :on-mouse-up :br :on-mouse-over :panel-1 :panel-2 :pointer-events :required :height :border-bottom :initial-split :left :span :margin :attr}}, :doc nil}