;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name re-com.util, :imports nil, :requires {goog.date.UtcDateTime goog.date.UtcDateTime, goog.date.DateTime goog.date.DateTime, clojure.set clojure.set}, :uses {superset? clojure.set}, :defs {sum-scroll-offsets {:protocol-inline nil, :meta {:arglists (quote ([node])), :doc "Given a DOM node, I traverse through all ascendant nodes (until I reach body), summing any scrollLeft and scrollTop values\n   and return these sums in a map", :end-column 25, :end-line 106, :column 7, :line 106, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/sum-scroll-offsets, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 25, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Given a DOM node, I traverse through all ascendant nodes (until I reach body), summing any scrollLeft and scrollTop values\n   and return these sums in a map", :test true}, position-for-id {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :arglists-meta (nil)}, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v'. Returns the position of the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :end-column 22, :end-line 72, :column 7, :line 72, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/position-for-id, :variadic true, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :arglists-meta (nil)}, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :doc "Takes a vector of maps 'v'. Returns the position of the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :test true}, enumerate {:protocol-inline nil, :meta {:arglists (quote ([coll])), :doc "(for [[index item first? last?] (enumerate coll)] ...)  ", :end-column 16, :end-line 99, :column 7, :line 99, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/enumerate, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 16, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "(for [[index item first? last?] (enumerate coll)] ...)  ", :test true}, remove-id-item {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :arglists-meta (nil)}, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v', each of which has an id-fn (default :id) key.\n  Return v where item matching 'id' is excluded", :end-column 21, :end-line 88, :column 7, :line 88, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/remove-id-item, :variadic true, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :arglists-meta (nil)}, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :doc "Takes a vector of maps 'v', each of which has an id-fn (default :id) key.\n  Return v where item matching 'id' is excluded", :test true}, remove-nth {:protocol-inline nil, :meta {:arglists (quote ([v n])), :doc "Removes the item at position n from a vector v, returning a shrunk vector", :end-column 17, :end-line 55, :column 7, :line 55, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/remove-nth, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 17, :method-params ([v n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v n])), :doc "Removes the item at position n from a vector v, returning a shrunk vector", :test true}, deref-or-value {:protocol-inline nil, :meta {:arglists (quote ([val-or-atom])), :end-column 21, :end-line 21, :column 7, :line 21, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/deref-or-value, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 21, :method-params ([val-or-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val-or-atom])), :test true}, insert-nth {:protocol-inline nil, :meta {:arglists (quote ([vect index item])), :end-column 17, :end-line 63, :column 7, :line 63, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/insert-nth, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 17, :method-params ([vect index item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vect index item])), :test true}, now->utc {:protocol-inline nil, :meta {:arglists (quote ([])), :doc "Answer a goog.date.UtcDateTime based on local date/time.", :end-column 15, :end-line 123, :column 7, :line 123, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/now->utc, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Answer a goog.date.UtcDateTime based on local date/time.", :test true}, deep-merge {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vals)], :arglists [[& vals]], :arglists-meta (nil)}, :arglists (quote ([& vals])), :doc "Recursively merges maps. If vals are not maps, the last value wins.", :end-column 17, :end-line 13, :column 7, :line 13, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/deep-merge, :variadic true, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vals)], :arglists [[& vals]], :arglists-meta (nil)}, :method-params [(vals)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists [[& vals]], :doc "Recursively merges maps. If vals are not maps, the last value wins.", :test true}, pad-zero {:protocol-inline nil, :meta {:arglists (quote ([s len])), :doc "Left pad a string 's' with '0', until 's' has length 'len'. Return 's' unchanged, if it is already len or greater", :end-column 15, :end-line 31, :column 7, :line 31, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/pad-zero, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 15, :method-params ([s len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s len])), :doc "Left pad a string 's' with '0', until 's' has length 'len'. Return 's' unchanged, if it is already len or greater", :test true}, get-element-by-id {:protocol-inline nil, :meta {:arglists (quote ([id])), :end-column 24, :end-line 26, :column 7, :line 26, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/get-element-by-id, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 24, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, px {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 1, :method-params [(val negative)], :arglists [[val & negative]], :arglists-meta (nil)}, :arglists (quote ([val & negative])), :doc "takes a number (and optional :negative keyword to indicate a negative value) and returns that number as a string with 'px' at the end", :end-column 9, :end-line 45, :column 7, :line 45, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/px, :variadic true, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(val negative)], :arglists [[val & negative]], :arglists-meta (nil)}, :method-params [(val negative)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists [[val & negative]], :doc "takes a number (and optional :negative keyword to indicate a negative value) and returns that number as a string with 'px' at the end", :test true}, item-for-id {:protocol-inline nil, :meta {:top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :arglists-meta (nil)}, :arglists (quote ([id v & {:keys [id-fn], :or {id-fn :id}}])), :doc "Takes a vector of maps 'v'. Returns the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :end-column 18, :end-line 81, :column 7, :line 81, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/item-for-id, :variadic true, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :arglists-meta (nil)}, :method-params [(id v {:keys [id-fn], :or {id-fn :id}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists [[id v & {:keys [id-fn], :or {id-fn :id}}]], :doc "Takes a vector of maps 'v'. Returns the first item in 'v' whose id-fn (default :id) matches 'id'.\n   Returns nil if id not found", :test true}, fmap {:protocol-inline nil, :meta {:arglists (quote ([f m])), :doc "Takes a function 'f' amd a map 'm'.  Applies 'f' to each value in 'm' and returns.\n   (fmap  inc  {:a 4  :b 2})   =>   {:a 5  :b 3}", :end-column 11, :end-line 7, :column 7, :line 7, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/fmap, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 11, :method-params ([f m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f m])), :doc "Takes a function 'f' amd a map 'm'.  Applies 'f' to each value in 'm' and returns.\n   (fmap  inc  {:a 4  :b 2})   =>   {:a 5  :b 3}", :test true}, pad-zero-number {:protocol-inline nil, :meta {:arglists (quote ([num len])), :doc "return 'num' as a string of 'len' characters, left padding with '0' as necessary", :end-column 22, :end-line 39, :column 7, :line 39, :file "/Users/fabian/Code/go/src/github.com/fuzzyants/wikingo/app/resources/public/js/compiled/out/re_com/util.cljs"}, :name re-com.util/pad-zero-number, :variadic false, :file "resources/public/js/compiled/out/re_com/util.cljs", :end-column 22, :method-params ([num len]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num len])), :doc "return 'num' as a string of 'len' characters, left padding with '0' as necessary", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:id-fn :id :left :top], :seen #{:top :id-fn :id :left}}, :doc nil}